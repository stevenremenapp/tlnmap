{"version":3,"sources":["components/Sidebar.js","components/MapPin.js","components/Infowindow.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","_renderLibraryList","library","index","react_default","a","createElement","key","concat","className","onClick","_this","props","onViewportChange","name","BurgerMenu","right","noOverlay","disableOverlayClick","type","placeholder","LIBRARIES","map","this","React","Component","pinStyle","cursor","fill","stroke","MapPin","_this$props","_this$props$size","size","height","viewBox","style","Object","objectSpread","transform","d","PureComponent","Infowindow","info","displayName","tlnCode","rel","target","href","website","require","config","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_goToViewport","_ref","longitude","latitude","_onViewportChange","zoom","transitionInterpolator","FlyToInterpolator","transitionDuration","_renderLibraryMarker","esm","MapPin_MapPin","setState","popupInfo","state","viewport","width","window","innerWidth","innerHeight","maxZoom","bearing","pitch","_resize","bind","assertThisInitialized","addEventListener","removeEventListener","_this2","tipSize","anchor","onClose","Infowindow_Infowindow","_this3","id","src_components_Sidebar","pageWrapId","assign","mapStyle","mapboxApiAccessToken","process","_renderPopup","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b894d395.chunk.js","sourcesContent":["import React from 'react';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport './Sidebar.css';\r\nimport LIBRARIES from '../data/libraries.json';\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    _renderLibraryList = (library, index) => {\r\n        return (\r\n            <li\r\n                key={`library-${index}`}\r\n                className=\"library-list\"\r\n                onClick={() => {\r\n                    this.props.onViewportChange(library);\r\n                    // this.props.onListClick(library);\r\n                }}\r\n            >\r\n            {`${library.name}`}\r\n            </li>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Menu\r\n            right\r\n            noOverlay = {true}\r\n            disableOverlayClick\r\n            >\r\n                <h1>Locations</h1>\r\n                <input type=\"text\" placeholder=\"Search here\" className=\"search-input\"></input>\r\n                { LIBRARIES.map(this._renderLibraryList) }\r\n            </Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar;","import React, { PureComponent } from 'react';\r\n\r\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\r\nc0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\r\nC20.1,15.8,20.2,15.8,20.2,15.7z`;\r\n\r\nconst pinStyle = {\r\n    cursor: 'pointer',\r\n    fill: '#d00',\r\n    stroke: 'none'\r\n};\r\n\r\nexport default class MapPin extends PureComponent {\r\n    render() {\r\n\r\n        const {size = 20, onClick} = this.props;\r\n\r\n        return (\r\n            <svg height={size} viewBox='0 0 24 24'\r\n                style={{...pinStyle, transform: `translate(${-size/2}px,${-size}px)`}}\r\n                onClick={onClick}\r\n                >\r\n                <path d={ICON} />\r\n            </svg>\r\n        );\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\n\r\nexport default class Infowindow extends PureComponent {\r\n\r\n    render() {\r\n        const {info} = this.props;\r\n        // const displayName = `${info.name}, ${info.city}`;\r\n        const displayName = `${info.name}`;\r\n        const tlnCode = `${info.tlnCode}`;\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {displayName} | {tlnCode} | <a\r\n                        rel=\"noopener noreferrer\"\r\n                        target=\"_blank\"\r\n                        href={`${info.website}`}\r\n                        >\r\n                            Website\r\n                        </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport ReactMapGL, {NavigationControl, Marker, Popup, FlyToInterpolator} from 'react-map-gl';\nimport Sidebar from './components/Sidebar';\nimport MapPin from './components/MapPin';\nimport Infowindow from './components/Infowindow';\nimport LIBRARIES from './data/libraries.json';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './App.css';\nrequire('dotenv').config();\n\nconst MAPBOX_STYLE = 'mapbox://styles/mapbox/streets-v9';\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        latitude: 42.473091,\n        longitude: -83.221076,\n        zoom: 10,\n        maxZoom: 17,\n        bearing: 0,\n        pitch: 0\n      },\n      popupInfo: null\n    };\n    this._resize = this._resize.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._resize);\n    this._resize();\n    // console.log(process.env);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._resize);\n  }\n\n  _onViewportChange(viewport) {\n    this.setState({\n      viewport: {...this.state.viewport, ...viewport}\n    });\n  }\n\n  _goToViewport = ({longitude, latitude}) => {\n    this._onViewportChange({\n      longitude,\n      latitude,\n      zoom: 11,\n      transitionInterpolator: new FlyToInterpolator(),\n      transitionDuration: 500\n    });\n  }\n\n  _resize() {\n    this._onViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  _renderLibraryMarker = (library, index) => {\n    return (\n      <Marker\n        key={`marker-${index}`}\n        latitude={library.latitude}\n        longitude={library.longitude}\n      >\n      <MapPin size={20} onClick={() => this.setState({popupInfo: library})} />\n      </Marker>\n    );\n  }\n\n  _renderPopup() {\n    const {popupInfo} = this.state;\n\n    return popupInfo && (\n      <Popup\n        tipSize={5}\n        anchor=\"top\"\n        latitude={popupInfo.latitude}\n        longitude={popupInfo.longitude}\n        onClose={() => this.setState({popupInfo: null})}\n      >\n      <Infowindow info={popupInfo} />\n      </Popup>\n    );\n  }\n\n  render() {\n    return (\n      <div id='outer-container'>\n        <Sidebar\n          pageWrapId={ \"page-wrap\" }\n          onViewportChange={this._goToViewport}\n        />\n        <div id='page-wrap'>\n          <ReactMapGL\n            {...this.state.viewport}\n            mapStyle={MAPBOX_STYLE}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            onViewportChange={viewport => this._onViewportChange(viewport)}\n            >\n\n            { LIBRARIES.map(this._renderLibraryMarker) }\n\n            {this._renderPopup()}\n\n            <div className=\"nav\">\n              <NavigationControl\n                onViewportChange={viewport => this._onViewportChange(viewport)}\n                />\n            </div>\n            {/* <div className=\"menu\"></div> */}\n            </ReactMapGL>\n        </div>\n        </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}