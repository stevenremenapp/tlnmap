{"version":3,"sources":["components/Sidebar.js","components/MapPin.js","components/Infowindow.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_updateQuery","newQuery","setState","query","filterLocations","state","_this2","react_default","a","createElement","BurgerMenu","right","noOverlay","disableOverlayClick","className","type","placeholder","name","value","onChange","event","target","locations","map","library","index","key","concat","onClick","onViewportChange","openInfowindow","React","Component","pinStyle","cursor","fill","stroke","MapPin","_this$props","_this$props$size","size","onMouseOver","height","viewBox","style","objectSpread","transform","d","PureComponent","Infowindow","info","displayName","tlnCode","rel","href","website","require","config","Map","_onViewportChange","viewport","_mapClickToCloseInfowindow","closeInfowindow","_openInfowindow","_renderLibraryMarker","esm","latitude","longitude","MapPin_MapPin","window","addEventListener","_resize","bind","removeEventListener","width","innerWidth","innerHeight","popupInfo","tipSize","anchor","onClose","Infowindow_Infowindow","_this3","assign","mapStyle","mapboxApiAccessToken","process","LIBRARIES","_renderPopup","App","componentDidMount","filtered","_filterLocations","all","selectedIndex","filter","location","toLowerCase","includes","_closeInfowindow","_goToViewport","_ref","zoom","transitionInterpolator","FlyToInterpolator","transitionDuration","maxZoom","bearing","pitch","id","src_components_Sidebar","pageWrapId","Map_Map","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7caa5326.chunk.js","sourcesContent":["import React from 'react';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport './Sidebar.css';\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            query: \"\"\r\n        }\r\n    }\r\n\r\n    _updateQuery = (newQuery) => {\r\n        this.setState({ query: newQuery });\r\n        this.props.filterLocations(newQuery);\r\n    }\r\n\r\n    // _renderLibraryList = (library, index) => {\r\n    //     return (\r\n    //         <li\r\n    //             key={`library-${index}`}\r\n    //             className=\"library-list-items\"\r\n    //             onClick={() => {\r\n    //                 this.props.onViewportChange(library);\r\n    //                 this.props.openInfowindow(library);\r\n    //             }}\r\n    //         >\r\n    //         {`${library.name}`}\r\n    //         </li>\r\n    //     )\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <Menu\r\n            right\r\n            noOverlay = {true}\r\n            disableOverlayClick\r\n            >\r\n                <div className=\"search-box\">\r\n                    <h1 className=\"sidebar-header\">Locations</h1>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search here\"\r\n                        className=\"search-input\"\r\n                        name=\"filter\"\r\n                        value={this.state.query}\r\n                        onChange={event => this._updateQuery(event.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"library-list\">\r\n                    {/* { LIBRARIES.map(this._renderLibraryList) } */}\r\n                    {this.props.locations &&\r\n                        this.props.locations.map((library, index) => {\r\n                            return (\r\n                                <li\r\n                                    key={`library-${index}`}\r\n                                    className=\"library-list-items\"\r\n                                    onClick={() => {\r\n                                        this.props.onViewportChange(library);\r\n                                        this.props.openInfowindow(library);\r\n                                    }}\r\n                                >\r\n                                {`${library.name}`}\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar;","import React, { PureComponent } from 'react';\r\n\r\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\r\nc0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\r\nC20.1,15.8,20.2,15.8,20.2,15.7z`;\r\n\r\nconst pinStyle = {\r\n    cursor: 'pointer',\r\n    fill: '#d00',\r\n    stroke: 'none'\r\n};\r\n\r\nexport default class MapPin extends PureComponent {\r\n    render() {\r\n\r\n        const {size = 20, onClick, onMouseOver} = this.props;\r\n\r\n        return (\r\n            <svg height={size} viewBox='0 0 24 24'\r\n                style={{...pinStyle, transform: `translate(${-size/2}px,${-size}px)`}}\r\n                onClick={onClick}\r\n                onMouseOver={onMouseOver}\r\n                // onMouseOut={onMouseOut}\r\n                >\r\n                <path d={ICON} />\r\n            </svg>\r\n        );\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\n\r\nexport default class Infowindow extends PureComponent {\r\n\r\n    render() {\r\n        const {info} = this.props;\r\n        // const displayName = `${info.name}, ${info.city}`;\r\n        const displayName = `${info.name}`;\r\n        const tlnCode = `${info.tlnCode}`;\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {displayName} | {tlnCode} | <a\r\n                        rel=\"noopener noreferrer\"\r\n                        target=\"_blank\"\r\n                        href={`${info.website}`}\r\n                        >\r\n                            Website\r\n                        </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport ReactMapGL, {NavigationControl, Marker, Popup} from 'react-map-gl';\r\nimport MapPin from './MapPin';\r\nimport Infowindow from './Infowindow';\r\nimport LIBRARIES from '../data/libraries.json';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport './Map.css';\r\nrequire('dotenv').config();\r\n\r\nconst MAPBOX_STYLE = 'mapbox://styles/mapbox/streets-v9';\r\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\r\n\r\nexport default class Map extends Component {\r\n\r\n    componentDidMount() {\r\n      window.addEventListener('resize', this._resize.bind(this));\r\n      // this._resize();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      window.removeEventListener('resize', this._resize.bind(this));\r\n    }\r\n\r\n    _onViewportChange = (viewport) => {\r\n      this.props.onViewportChange(viewport);\r\n    }\r\n\r\n    _mapClickToCloseInfowindow = (event) => {\r\n      if (event.target.className === \"overlays\") {\r\n        this.props.closeInfowindow();\r\n      }\r\n    }\r\n\r\n    _openInfowindow = (library) => {\r\n      this.props.openInfowindow(library);\r\n    }\r\n\r\n    _resize() {\r\n      this.props.onViewportChange({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      });\r\n    }\r\n\r\n    _renderLibraryMarker = (library, index) => {\r\n      return (\r\n        <Marker\r\n          key={`marker-${index}`}\r\n          latitude={library.latitude}\r\n          longitude={library.longitude}\r\n        >\r\n        <MapPin\r\n          size={20}\r\n          onMouseOver={() => this._openInfowindow(library)}\r\n          // onMouseOut={() => this.setState({popupInfo: null})}\r\n          onClick={() => this._openInfowindow(library)}\r\n        />\r\n        </Marker>\r\n      );\r\n    }\r\n\r\n    _renderPopup() {\r\n      const popupInfo = this.props.popupInfo;\r\n\r\n      return popupInfo && (\r\n        <Popup\r\n          tipSize={5}\r\n          anchor=\"top\"\r\n          latitude={popupInfo.latitude}\r\n          longitude={popupInfo.longitude}\r\n          onClose={() => this.setState({popupInfo: null})}\r\n        >\r\n        <Infowindow info={popupInfo} />\r\n        </Popup>\r\n      );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <ReactMapGL\r\n          {...this.props.viewport}\r\n          mapStyle={MAPBOX_STYLE}\r\n          mapboxApiAccessToken={MAPBOX_TOKEN}\r\n          onViewportChange={viewport => this._onViewportChange(viewport)}\r\n          onClick={event => this._mapClickToCloseInfowindow(event)}\r\n          >\r\n\r\n          { LIBRARIES.map(this._renderLibraryMarker) }\r\n\r\n          {this._renderPopup()}\r\n\r\n          <div className=\"map-nav\">\r\n            <NavigationControl\r\n              onViewportChange={viewport => this._onViewportChange(viewport)}\r\n              />\r\n          </div>\r\n          </ReactMapGL>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport {FlyToInterpolator} from 'react-map-gl';\nimport Sidebar from './components/Sidebar';\nimport Map from './components/Map';\nimport LIBRARIES from './data/libraries.json';\nimport './App.css';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        latitude: 42.473091,\n        longitude: -83.221076,\n        zoom: 10,\n        maxZoom: 17,\n        bearing: 0,\n        pitch: 0\n      },\n      popupInfo: null,\n      all: LIBRARIES,\n      filtered: null\n    };\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      // ...this.state,\n      filtered: this._filterLocations(this.state.all, \"\")\n    });\n  }\n\n  _updateQuery = (query) => {\n    this.setState({\n      // ...this.state,\n      selectedIndex: null,\n      filtered: this._filterLocations(this.state.all, query)\n    });\n  }\n\n  _filterLocations = (locations, query) => {\n    return locations.filter(location => location.name.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  _closeInfowindow = () => {\n    this.setState({\n      popupInfo: null\n    });\n  }\n\n  _openInfowindow = (library) => {\n    this.setState({\n      popupInfo: library\n    });\n  }\n\n  _onViewportChange = (viewport) => {\n    this.setState({\n      viewport: {...this.state.viewport, ...viewport}\n    });\n}\n\n  _goToViewport = ({longitude, latitude}) => {\n    this._onViewportChange({\n      longitude,\n      latitude,\n      zoom: 14,\n      transitionInterpolator: new FlyToInterpolator(),\n      transitionDuration: 500\n    });\n  }\n\n  render() {\n    return (\n      <div id='outer-container'>\n        <Sidebar\n          pageWrapId={ \"page-wrap\" }\n          onViewportChange={this._goToViewport}\n          openInfowindow={this._openInfowindow.bind(this)}\n          locations={this.state.filtered}\n          filterLocations={this._updateQuery}\n        />\n        <div id='page-wrap'>\n          <Map\n            viewport={this.state.viewport}\n            onViewportChange={this._onViewportChange.bind(this)}\n            popupInfo={this.state.popupInfo}\n            openInfowindow={this._openInfowindow.bind(this)}\n            closeInfowindow={this._closeInfowindow.bind(this)}\n          ></Map>\n        </div>\n        </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}