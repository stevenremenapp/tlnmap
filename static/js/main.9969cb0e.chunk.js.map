{"version":3,"sources":["components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","react_default","a","createElement","BurgerMenu","right","noOverlay","disableOverlayClick","href","id","className","React","Component","require","config","navStyle","position","top","left","padding","markerStyle","background","fontSize","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","viewport","width","window","innerWidth","height","innerHeight","longitude","latitude","zoom","maxZoom","_resize","bind","assertThisInitialized","addEventListener","removeEventListener","setState","objectSpread","_onViewportChange","_this2","src_components_Sidebar","pageWrapId","esm","assign","mapStyle","mapboxApiAccessToken","process","onViewportChange","style","offsetTop","closeButton","closeOnClick","anchor","tipSize","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAsBeA,0LAfP,OACIC,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACAC,OAAK,EACLC,WAAa,EACbC,qBAAmB,GAEfN,EAAAC,EAAAC,cAAA,KAAGK,KAAK,IAAIC,GAAG,OAAOC,UAAU,aAAhC,QACAT,EAAAC,EAAAC,cAAA,KAAGK,KAAK,IAAIC,GAAG,QAAQC,UAAU,aAAjC,SACAT,EAAAC,EAAAC,cAAA,KAAGK,KAAK,IAAIC,GAAG,UAAUC,UAAU,aAAnC,WACAT,EAAAC,EAAAC,cAAA,KAAGK,KAAK,IAAIC,GAAG,WAAWC,UAAU,aAApC,oBAZMC,IAAMC,wBCC5BC,EAAQ,IAAUC,SAElB,IAGMC,EAAW,CACfC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,QAAS,QAGLC,EAAc,CAClBJ,SAAU,WACVG,QAAS,MACTE,WAAY,OACZC,SAAU,QAGSC,cAEnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAU,CACRC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,YACfC,WAAY,QACZC,SAAU,QACVC,KAAM,GACNC,QAAS,KAGbjB,EAAKkB,QAAUlB,EAAKkB,QAAQC,KAAblB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAZEA,mFAgBjBU,OAAOW,iBAAiB,SAAUlB,KAAKe,SACvCf,KAAKe,yDAKLR,OAAOY,oBAAoB,SAAUnB,KAAKe,mDAG1BV,GAChBL,KAAKoB,SAAS,CACZf,SAASP,OAAAuB,EAAA,EAAAvB,CAAA,GAAKE,KAAKI,MAAMC,SAAaA,uCAKxCL,KAAKsB,kBAAkB,CACrBhB,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,+CAIV,IAAAa,EAAAvB,KACP,OACE3B,EAAAC,EAAAC,cAAA,OAAKM,GAAG,mBACNR,EAAAC,EAAAC,cAACiD,EAAD,CAASC,WAAa,cACtBpD,EAAAC,EAAAC,cAAA,OAAKM,GAAG,aACNR,EAAAC,EAAAC,cAACmD,EAAA,EAAD5B,OAAA6B,OAAA,GACM3B,KAAKI,MAAMC,SADjB,CAEEuB,SAhES,oCAiETC,qBAhESC,qGAiETC,iBAAkB,SAAA1B,GAAQ,OAAIkB,EAAKD,kBAAkBjB,MAErDhC,EAAAC,EAAAC,cAAA,OAAKyD,MAAO7C,GACVd,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACEK,iBAAkB,SAAA1B,GAAQ,OAAIkB,EAAKD,kBAAkBjB,OAIzDhC,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAQd,SAAU,UAAWD,WAAY,UAAWsB,WAAY,IAC9D5D,EAAAC,EAAAC,cAAA,OAAKyD,MAAOxC,GAAZ,iBAEFnB,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOd,SAAU,UAAWD,WAAY,UAAWuB,aAAa,EAAMC,cAAc,EAAMC,OAAO,MAAMC,QAAS,GAC9GhE,EAAAC,EAAAC,cAAA,0CA7DmBS,aCZbsD,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9969cb0e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { reveal as Menu } from 'react-burger-menu';\r\nimport './Sidebar.css';\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Menu\r\n            right\r\n            noOverlay = {true}\r\n            disableOverlayClick\r\n            >\r\n                <a href='/' id='home' className='menu-item'>Home</a>\r\n                <a href='/' id='about' className='menu-item'>About</a>\r\n                <a href='/' id='contact' className='menu-item'>Contact</a>\r\n                <a href='/' id='settings' className='menu-item'>Settings</a>\r\n            </Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar;","import React, { Component } from 'react';\nimport ReactMapGL, {NavigationControl, Marker, Popup} from 'react-map-gl';\nimport Sidebar from './components/Sidebar';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './App.css';\nrequire('dotenv').config();\n\nconst MAPBOX_STYLE = 'mapbox://styles/mapbox/streets-v9';\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\nconst navStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  padding: '10px'\n}\n\nconst markerStyle = {\n  position: 'absolute',\n  padding: '5px',\n  background: 'blue',\n  fontSize: '10px'\n}\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        longitude: -83.0458,\n        latitude: 42.3314,\n        zoom: 11,\n        maxZoom: 16\n      }\n    };\n    this._resize = this._resize.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._resize);\n    this._resize();\n    // console.log(process.env);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._resize);\n  }\n\n  _onViewportChange(viewport) {\n    this.setState({\n      viewport: {...this.state.viewport, ...viewport}\n    });\n  }\n\n  _resize() {\n    this._onViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  render() {\n    return (\n      <div id='outer-container'>\n        <Sidebar pageWrapId={ \"page-wrap\" } />\n        <div id='page-wrap'>\n          <ReactMapGL\n            {...this.state.viewport}\n            mapStyle={MAPBOX_STYLE}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            onViewportChange={viewport => this._onViewportChange(viewport)}\n            >\n            <div style={navStyle}>\n              <NavigationControl\n                onViewportChange={viewport => this._onViewportChange(viewport)}\n                />\n            </div>\n            {/* <div className=\"menu\"></div> */}\n            <Marker latitude={42.414752} longitude={-83.289607} offsetTop={-30}>\n              <div style={markerStyle}>You are here</div>\n            </Marker>\n            <Popup latitude={42.414752} longitude={-83.289607} closeButton={true} closeOnClick={true} anchor=\"top\" tipSize={5}>\n              <div>\n                This is the RTDL\n              </div>\n            </Popup>\n            </ReactMapGL>\n        </div>\n        </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}